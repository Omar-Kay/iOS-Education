
- swift overview
https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309

- apple links
https://www.apple.com/everyone-can-code/
https://www.apple.com/education/teachers/
https://images.apple.com/education/docs/App_Development_with_Swift_Curriculum_Guide.pdf

- stanford course
https://itunes.apple.com/us/course/developing-ios-11-apps-with-swift/id1309275316

- other iOS sites
http://nshipster.com
https://www.objc.io
https://littlebitesofcocoa.com
https://www.natashatherobot.com
https://iosdevweekly.com

- cocoapods 3rd party package / framework manager
https://cocoapods.org

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Course Outline:

- Swift Basics with Playgrounds:
- Swift Keywords, Default Types, Strings, Numbers, etc, Collections, Classes, Protocols, enums, Optionals, Variables, Functions, Completion Blocks, Control Flow, User Defined Types, Dispatch Queues (swift threading), Memory Management, etc.

- Xcode and Project Environments
- Keyboard shortcuts, Command+Click, Command+Shift+O, Command+Option+Shift+Click for multiple windows, Control+Click+Drag for xib outlet hookup
- Debugging in Xcode, exploding the UI to see the view heirarchy
- Do something that creates a crash

- iOS Frameworks: Foundation and UIKit
- The AppDelegate
- ViewControllers and Views
- Navigation and Tab bar controllers
- Show basic full screen constraints early
- Interface Builder and Storyboards
- Doing things in code vs xibs
- Labels, Buttons, Tables, Navigation, etc.
- Autolayout - show constraints breaking

- Common resources and websites
- 3rd Party frameworks and Cocoapods (https://cocoapods.org).

- Networking Options, system frameworks vs. AlamoFire
- Public web service APIs and consuming JSON with Swift (https://home.openweathermap.org/users/sign_up)
- Design Patterns in Swift
- Integrating Data with the UI Classes (Building a real app)


========================================================================================================================
========================================================================================================================
========================================================================================================================

Day 1:

- Introductions
- Overview
- Brief history of OSX and iOS and Objective-C and Swift
- Xcode
- Playground now, iOS project later (if the playground is causing us issues, we might have to switch)
- Just start typing and the output will generate
- Strings
- Mutability
- Optionals?, yes!
- Numbers (as structs)
- Primitive types in swift, where the heck are they?
- Functions
...
- Closures
- Assignment 1

- iOS
- View Controllers
- The view hierarchy
- Interface builder, xibs and storyboards
- Views
- Button and Labels
- Outlets and actions
- Assignment 2

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Day 2:

- Continue Assignment 2

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Assignments:

1: Basic Swift Overview
- Use the "Person" object we created before
- Create A "Tranactional" protocol that has a withdraw and deposit functions. Withdraw takes a double and returns a bool if the account has sufficent funds, the deposit takes a Double as a parameter and returns nothing.
- Create A "AccountType" enum for checking, savings, trust, personalLoan, etc.
- Create A "BankAccount" object with a balance or type Double, an instance of "AccountType", an instance of "Person", and conforms to the "Tranactional" protocol, give it an initalizer and a computed var "description"
- Use an array of doubles to store the tranaction history, simply capturing the value passed into it as a double, then calulate the largest deposit made.
- Test it by adding and removing value from the account

2: Tap Counter
- 

3: Weather app
- Register for api key: https://home.openweathermap.org/users/sign_up
